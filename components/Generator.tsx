
import React, { useState, useCallback, useMemo } from 'react';
import { PcBuild, PcPart, PowerSupply } from '../types';
import { generatePCBuild } from '../services/geminiService';
import { USAGE_OPTIONS, RESOLUTION_OPTIONS, PLATFORM_OPTIONS } from '../constants';
import { useLanguage } from '../hooks/useLanguage';
import Button from './ui/Button';
import Card, { CardContent, CardHeader, CardTitle, CardDescription } from './ui/Card';
import Label from './ui/Label';
import Select from './ui/Select';
import Slider from './ui/Slider';

const CopyIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>
);
const CheckIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><polyline points="20 6 9 17 4 12"/></svg>
);
const RefreshCwIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/><path d="M21 3v5h-5"/><path d="M3 21v-5h5"/><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/></svg>
);
const ExternalLinkIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/><polyline points="15 3 21 3 21 9"/><line x1="10" y1="14" x2="21" y2="3"/></svg>
);

const Generator: React.FC = () => {
    const { t, language, amazonDomain, currencySymbol } = useLanguage();
    
    const [budget, setBudget] = useState<number>(1500);
    const [usage, setUsage] = useState<string>(USAGE_OPTIONS[0].value);
    const [resolution, setResolution] = useState<string>(RESOLUTION_OPTIONS[1].value);
    const [platform, setPlatform] = useState<string>(PLATFORM_OPTIONS[0].value);

    const [build, setBuild] = useState<PcBuild | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [isCopied, setIsCopied] = useState<boolean>(false);

    const translatedUsageOptions = useMemo(() => USAGE_OPTIONS.map(opt => ({...opt, label: t(`generator.usage_options.${opt.t_key}`)}
    )), [t]);
    const translatedResolutionOptions = useMemo(() => RESOLUTION_OPTIONS.map(opt => ({...opt, label: t(`generator.resolution_options.${opt.t_key}`)}
    )), [t]);
    const translatedPlatformOptions = useMemo(() => PLATFORM_OPTIONS.map(opt => ({...opt, label: t(`generator.platform_options.${opt.t_key}`)}
    )), [t]);

    const handleGenerate = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        setBuild(null);
        try {
            const result = await generatePCBuild({ budget, usage, resolution, platform }, language);
            setBuild(result);
        } catch (err: any) {
            setError(err.message || 'An unknown error occurred.');
        } finally {
            setIsLoading(false);
        }
    }, [budget, usage, resolution, platform, language]);

    const handleCopy = useCallback(() => {
        if (!build) return;

        const buildText = `
PC Build Configuration
----------------------
Budget: ~${build.totalPrice}${currencySymbol}
Estimated Wattage: ${build.totalWattage}W

Components:
- ${t('components.cpu')}: ${build.cpu.name} (~${build.cpu.price}${currencySymbol})
- ${t('components.cooler')}: ${build.cooler.name} (~${build.cooler.price}${currencySymbol})
- ${t('components.gpu')}: ${build.gpu.name} (~${build.gpu.price}${currencySymbol})
- ${t('components.motherboard')}: ${build.motherboard.name} (~${build.motherboard.price}${currencySymbol})
- ${t('components.ram')}: ${build.ram.name} (~${build.ram.price}${currencySymbol})
- ${t('components.ssd')}: ${build.ssd.name} (~${build.ssd.price}${currencySymbol})
- ${t('components.psu')}: ${build.psu.name} (${build.psu.wattage}W) (~${build.psu.price}${currencySymbol})
- ${t('components.case')}: ${build.case.name} (~${build.case.price}${currencySymbol})
----------------------
Generated by AI PC Config Generator
        `.trim();
        
        navigator.clipboard.writeText(buildText);
        setIsCopied(true);
        setTimeout(() => setIsCopied(false), 2000);
    }, [build, currencySymbol, t]);

    const orderedBuild = useMemo(() => {
        if (!build) return [];
        const order: (keyof PcBuild)[] = ['cpu', 'cooler', 'gpu', 'motherboard', 'ram', 'ssd', 'psu', 'case'];
        return order.map(key => ({ key, ...build[key] as PcPart | PowerSupply }));
    }, [build]);
    
    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-1 space-y-6">
                <Card className="sticky top-20">
                    <CardHeader>
                        <CardTitle>{t('generator.title')}</CardTitle>
                        <CardDescription>{t('generator.description')}</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                        <div>
                            <Label htmlFor="budget">{t('generator.budget')}: <span className="font-mono text-primary">{budget}{currencySymbol}</span></Label>
                            <Slider id="budget" min="500" max="5000" step="100" value={budget} onChange={(e) => setBudget(Number(e.target.value))} />
                        </div>
                        <div>
                            <Label htmlFor="usage">{t('generator.usage')}</Label>
                            <Select id="usage" value={usage} onChange={(e) => setUsage(e.target.value)}>
                                {translatedUsageOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                            </Select>
                        </div>
                        <div>
                            <Label htmlFor="resolution">{t('generator.resolution')}</Label>
                            <Select id="resolution" value={resolution} onChange={(e) => setResolution(e.target.value)}>
                                {translatedResolutionOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                            </Select>
                        </div>
                        <div>
                            <Label htmlFor="platform">{t('generator.platform')}</Label>
                            <Select id="platform" value={platform} onChange={(e) => setPlatform(e.target.value)}>
                                {translatedPlatformOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                            </Select>
                        </div>
                        <Button onClick={handleGenerate} disabled={isLoading} className="w-full">
                            {isLoading ? t('generator.button_generating') : t('generator.button_generate')}
                        </Button>
                    </CardContent>
                </Card>
            </div>

            <div className="lg:col-span-2 space-y-6">
                {isLoading && (
                     <div className="flex flex-col items-center justify-center h-96 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-700">
                        <div className="w-12 h-12 rounded-full animate-pulse-glow bg-primary/20 flex items-center justify-center">
                          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary animate-spin"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>
                        </div>
                        <p className="mt-4 text-lg font-medium">{t('generator.loading_title')}</p>
                        <p className="text-sm text-gray-500 dark:text-gray-400">{t('generator.loading_subtitle')}</p>
                    </div>
                )}
                {error && (
                    <Card className="border-red-500/50 bg-red-50 dark:bg-red-950/20">
                        <CardHeader>
                            <CardTitle className="text-red-700 dark:text-red-400">{t('generator.error_title')}</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <p className="text-red-600 dark:text-red-400">{error}</p>
                            <Button onClick={handleGenerate} className="mt-4">{t('generator.error_button_retry')}</Button>
                        </CardContent>
                    </Card>
                )}
                {!isLoading && !build && !error && (
                    <div className="flex items-center justify-center h-96 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-700">
                        <div className="text-center">
                            <h3 className="text-xl font-semibold">{t('generator.placeholder_title')}</h3>
                            <p className="text-gray-500 dark:text-gray-400 mt-2">{t('generator.placeholder_subtitle')}</p>
                        </div>
                    </div>
                )}
                {build && (
                    <div className="animate-[fadeIn_0.5s_ease-in-out]">
                        <Card className="mb-6">
                            <CardHeader className="flex flex-row items-center justify-between">
                                <div>
                                    <CardTitle>{t('generator.result_title')}</CardTitle>
                                    <CardDescription>{t('generator.result_description')}</CardDescription>
                                </div>
                                 <div className="flex items-center gap-2">
                                     <Button variant="secondary" onClick={handleGenerate} disabled={isLoading} size="sm">
                                         <RefreshCwIcon className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                                         {t('generator.result_button_regenerate')}
                                     </Button>
                                     <Button onClick={handleCopy} size="sm" className="min-w-[100px]">
                                        {isCopied ? <CheckIcon className="w-4 h-4 mr-2" /> : <CopyIcon className="w-4 h-4 mr-2" />}
                                        {isCopied ? t('generator.result_button_copied') : t('generator.result_button_copy')}
                                     </Button>
                                </div>
                            </CardHeader>
                            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="p-4 rounded-lg bg-gray-100 dark:bg-gray-800/50">
                                    <p className="text-sm text-gray-500 dark:text-gray-400">{t('generator.result_total_price')}</p>
                                    <p className="text-2xl font-bold text-primary">~{build.totalPrice}{currencySymbol}</p>
                                </div>
                                <div className="p-4 rounded-lg bg-gray-100 dark:bg-gray-800/50">
                                    <p className="text-sm text-gray-500 dark:text-gray-400">{t('generator.result_total_wattage')}</p>
                                    <p className="text-2xl font-bold font-mono">{build.totalWattage}W</p>
                                </div>
                            </CardContent>
                        </Card>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {orderedBuild.map((part, index) => (
                                <Card key={index} className="flex flex-col">
                                    <CardHeader>
                                        <CardTitle>{t(`components.${part.key}`)}</CardTitle>
                                        <CardDescription className="font-mono text-sm pt-1">{part.name}</CardDescription>
                                    </CardHeader>
                                    <CardContent className="mt-auto flex items-center justify-between">
                                        <p className="text-lg font-semibold text-gray-800 dark:text-gray-200">~{part.price}{currencySymbol}</p>
                                        <a href={`https://${amazonDomain}/s?k=${encodeURIComponent(part.name)}`}
                                           target="_blank"
                                           rel="noopener noreferrer"
                                           aria-label={`${t('generator.view_on_amazon')} for ${part.name}`}
                                           className="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400">
                                            <ExternalLinkIcon className="w-5 h-5" />
                                        </a>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Generator;
